// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-live-cms/go-live-cms/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/go-live-cms/go-live-cms/db/sqlc"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// BlockSession mocks base method.
func (m *MockStore) BlockSession(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlockSession indicates an expected call of BlockSession.
func (mr *MockStoreMockRecorder) BlockSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockSession", reflect.TypeOf((*MockStore)(nil).BlockSession), arg0, arg1)
}

// CountTotalMedia mocks base method.
func (m *MockStore) CountTotalMedia(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTotalMedia", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTotalMedia indicates an expected call of CountTotalMedia.
func (mr *MockStoreMockRecorder) CountTotalMedia(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTotalMedia", reflect.TypeOf((*MockStore)(nil).CountTotalMedia), arg0)
}

// CountTotalPosts mocks base method.
func (m *MockStore) CountTotalPosts(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTotalPosts", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTotalPosts indicates an expected call of CountTotalPosts.
func (mr *MockStoreMockRecorder) CountTotalPosts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTotalPosts", reflect.TypeOf((*MockStore)(nil).CountTotalPosts), arg0)
}

// CountTotalSessions mocks base method.
func (m *MockStore) CountTotalSessions(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTotalSessions", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTotalSessions indicates an expected call of CountTotalSessions.
func (mr *MockStoreMockRecorder) CountTotalSessions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTotalSessions", reflect.TypeOf((*MockStore)(nil).CountTotalSessions), arg0)
}

// CountTotalTaxonomies mocks base method.
func (m *MockStore) CountTotalTaxonomies(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTotalTaxonomies", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTotalTaxonomies indicates an expected call of CountTotalTaxonomies.
func (mr *MockStoreMockRecorder) CountTotalTaxonomies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTotalTaxonomies", reflect.TypeOf((*MockStore)(nil).CountTotalTaxonomies), arg0)
}

// CountTotalUsers mocks base method.
func (m *MockStore) CountTotalUsers(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTotalUsers", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTotalUsers indicates an expected call of CountTotalUsers.
func (mr *MockStoreMockRecorder) CountTotalUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTotalUsers", reflect.TypeOf((*MockStore)(nil).CountTotalUsers), arg0)
}

// CreateMedia mocks base method.
func (m *MockStore) CreateMedia(arg0 context.Context, arg1 db.CreateMediaParams) (db.Medium, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMedia", arg0, arg1)
	ret0, _ := ret[0].(db.Medium)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMedia indicates an expected call of CreateMedia.
func (mr *MockStoreMockRecorder) CreateMedia(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMedia", reflect.TypeOf((*MockStore)(nil).CreateMedia), arg0, arg1)
}

// CreateMediaAndLinkTx mocks base method.
func (m *MockStore) CreateMediaAndLinkTx(arg0 context.Context, arg1 db.CreateMediaAndLinkTxParams) (db.CreateMediaAndLinkTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMediaAndLinkTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateMediaAndLinkTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMediaAndLinkTx indicates an expected call of CreateMediaAndLinkTx.
func (mr *MockStoreMockRecorder) CreateMediaAndLinkTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMediaAndLinkTx", reflect.TypeOf((*MockStore)(nil).CreateMediaAndLinkTx), arg0, arg1)
}

// CreatePostMedia mocks base method.
func (m *MockStore) CreatePostMedia(arg0 context.Context, arg1 db.CreatePostMediaParams) (db.PostMedium, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePostMedia", arg0, arg1)
	ret0, _ := ret[0].(db.PostMedium)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePostMedia indicates an expected call of CreatePostMedia.
func (mr *MockStoreMockRecorder) CreatePostMedia(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePostMedia", reflect.TypeOf((*MockStore)(nil).CreatePostMedia), arg0, arg1)
}

// CreatePostTaxonomy mocks base method.
func (m *MockStore) CreatePostTaxonomy(arg0 context.Context, arg1 db.CreatePostTaxonomyParams) (db.PostsTaxonomy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePostTaxonomy", arg0, arg1)
	ret0, _ := ret[0].(db.PostsTaxonomy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePostTaxonomy indicates an expected call of CreatePostTaxonomy.
func (mr *MockStoreMockRecorder) CreatePostTaxonomy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePostTaxonomy", reflect.TypeOf((*MockStore)(nil).CreatePostTaxonomy), arg0, arg1)
}

// CreatePostTx mocks base method.
func (m *MockStore) CreatePostTx(arg0 context.Context, arg1 db.CreatePostTxParams) (db.CreatePostTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePostTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreatePostTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePostTx indicates an expected call of CreatePostTx.
func (mr *MockStoreMockRecorder) CreatePostTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePostTx", reflect.TypeOf((*MockStore)(nil).CreatePostTx), arg0, arg1)
}

// CreatePostWithMediaTx mocks base method.
func (m *MockStore) CreatePostWithMediaTx(arg0 context.Context, arg1 db.CreatePostWithMediaTxParams) (db.CreatePostWithMediaTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePostWithMediaTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreatePostWithMediaTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePostWithMediaTx indicates an expected call of CreatePostWithMediaTx.
func (mr *MockStoreMockRecorder) CreatePostWithMediaTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePostWithMediaTx", reflect.TypeOf((*MockStore)(nil).CreatePostWithMediaTx), arg0, arg1)
}

// CreatePostWithTaxonomiesTx mocks base method.
func (m *MockStore) CreatePostWithTaxonomiesTx(arg0 context.Context, arg1 db.CreatePostWithTaxonomiesTxParams) (db.CreatePostWithTaxonomiesTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePostWithTaxonomiesTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreatePostWithTaxonomiesTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePostWithTaxonomiesTx indicates an expected call of CreatePostWithTaxonomiesTx.
func (mr *MockStoreMockRecorder) CreatePostWithTaxonomiesTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePostWithTaxonomiesTx", reflect.TypeOf((*MockStore)(nil).CreatePostWithTaxonomiesTx), arg0, arg1)
}

// CreatePosts mocks base method.
func (m *MockStore) CreatePosts(arg0 context.Context, arg1 db.CreatePostsParams) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePosts", arg0, arg1)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePosts indicates an expected call of CreatePosts.
func (mr *MockStoreMockRecorder) CreatePosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePosts", reflect.TypeOf((*MockStore)(nil).CreatePosts), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), arg0, arg1)
}

// CreateTaxonomy mocks base method.
func (m *MockStore) CreateTaxonomy(arg0 context.Context, arg1 db.CreateTaxonomyParams) (db.Taxonomy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTaxonomy", arg0, arg1)
	ret0, _ := ret[0].(db.Taxonomy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTaxonomy indicates an expected call of CreateTaxonomy.
func (mr *MockStoreMockRecorder) CreateTaxonomy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTaxonomy", reflect.TypeOf((*MockStore)(nil).CreateTaxonomy), arg0, arg1)
}

// CreateTaxonomyAndLinkTx mocks base method.
func (m *MockStore) CreateTaxonomyAndLinkTx(arg0 context.Context, arg1 db.CreateTaxonomyAndLinkTxParams) (db.CreateTaxonomyAndLinkTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTaxonomyAndLinkTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateTaxonomyAndLinkTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTaxonomyAndLinkTx indicates an expected call of CreateTaxonomyAndLinkTx.
func (mr *MockStoreMockRecorder) CreateTaxonomyAndLinkTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTaxonomyAndLinkTx", reflect.TypeOf((*MockStore)(nil).CreateTaxonomyAndLinkTx), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateUserPost mocks base method.
func (m *MockStore) CreateUserPost(arg0 context.Context, arg1 db.CreateUserPostParams) (db.UserPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserPost", arg0, arg1)
	ret0, _ := ret[0].(db.UserPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserPost indicates an expected call of CreateUserPost.
func (mr *MockStoreMockRecorder) CreateUserPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserPost", reflect.TypeOf((*MockStore)(nil).CreateUserPost), arg0, arg1)
}

// DeleteMedia mocks base method.
func (m *MockStore) DeleteMedia(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMedia", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMedia indicates an expected call of DeleteMedia.
func (mr *MockStoreMockRecorder) DeleteMedia(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMedia", reflect.TypeOf((*MockStore)(nil).DeleteMedia), arg0, arg1)
}

// DeleteMediaByUserID mocks base method.
func (m *MockStore) DeleteMediaByUserID(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMediaByUserID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMediaByUserID indicates an expected call of DeleteMediaByUserID.
func (mr *MockStoreMockRecorder) DeleteMediaByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMediaByUserID", reflect.TypeOf((*MockStore)(nil).DeleteMediaByUserID), arg0, arg1)
}

// DeleteMediaPosts mocks base method.
func (m *MockStore) DeleteMediaPosts(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMediaPosts", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMediaPosts indicates an expected call of DeleteMediaPosts.
func (mr *MockStoreMockRecorder) DeleteMediaPosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMediaPosts", reflect.TypeOf((*MockStore)(nil).DeleteMediaPosts), arg0, arg1)
}

// DeleteMediaTx mocks base method.
func (m *MockStore) DeleteMediaTx(arg0 context.Context, arg1 db.DeleteMediaTxParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMediaTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMediaTx indicates an expected call of DeleteMediaTx.
func (mr *MockStoreMockRecorder) DeleteMediaTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMediaTx", reflect.TypeOf((*MockStore)(nil).DeleteMediaTx), arg0, arg1)
}

// DeletePost mocks base method.
func (m *MockStore) DeletePost(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockStoreMockRecorder) DeletePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockStore)(nil).DeletePost), arg0, arg1)
}

// DeletePostMedia mocks base method.
func (m *MockStore) DeletePostMedia(arg0 context.Context, arg1 db.DeletePostMediaParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePostMedia", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePostMedia indicates an expected call of DeletePostMedia.
func (mr *MockStoreMockRecorder) DeletePostMedia(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePostMedia", reflect.TypeOf((*MockStore)(nil).DeletePostMedia), arg0, arg1)
}

// DeletePostMedias mocks base method.
func (m *MockStore) DeletePostMedias(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePostMedias", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePostMedias indicates an expected call of DeletePostMedias.
func (mr *MockStoreMockRecorder) DeletePostMedias(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePostMedias", reflect.TypeOf((*MockStore)(nil).DeletePostMedias), arg0, arg1)
}

// DeletePostTaxonomies mocks base method.
func (m *MockStore) DeletePostTaxonomies(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePostTaxonomies", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePostTaxonomies indicates an expected call of DeletePostTaxonomies.
func (mr *MockStoreMockRecorder) DeletePostTaxonomies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePostTaxonomies", reflect.TypeOf((*MockStore)(nil).DeletePostTaxonomies), arg0, arg1)
}

// DeletePostTaxonomy mocks base method.
func (m *MockStore) DeletePostTaxonomy(arg0 context.Context, arg1 db.DeletePostTaxonomyParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePostTaxonomy", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePostTaxonomy indicates an expected call of DeletePostTaxonomy.
func (mr *MockStoreMockRecorder) DeletePostTaxonomy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePostTaxonomy", reflect.TypeOf((*MockStore)(nil).DeletePostTaxonomy), arg0, arg1)
}

// DeletePostTx mocks base method.
func (m *MockStore) DeletePostTx(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePostTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePostTx indicates an expected call of DeletePostTx.
func (mr *MockStoreMockRecorder) DeletePostTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePostTx", reflect.TypeOf((*MockStore)(nil).DeletePostTx), arg0, arg1)
}

// DeletePostsByUserID mocks base method.
func (m *MockStore) DeletePostsByUserID(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePostsByUserID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePostsByUserID indicates an expected call of DeletePostsByUserID.
func (mr *MockStoreMockRecorder) DeletePostsByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePostsByUserID", reflect.TypeOf((*MockStore)(nil).DeletePostsByUserID), arg0, arg1)
}

// DeleteTaxonomy mocks base method.
func (m *MockStore) DeleteTaxonomy(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTaxonomy", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTaxonomy indicates an expected call of DeleteTaxonomy.
func (mr *MockStoreMockRecorder) DeleteTaxonomy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTaxonomy", reflect.TypeOf((*MockStore)(nil).DeleteTaxonomy), arg0, arg1)
}

// DeleteTaxonomyPosts mocks base method.
func (m *MockStore) DeleteTaxonomyPosts(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTaxonomyPosts", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTaxonomyPosts indicates an expected call of DeleteTaxonomyPosts.
func (mr *MockStoreMockRecorder) DeleteTaxonomyPosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTaxonomyPosts", reflect.TypeOf((*MockStore)(nil).DeleteTaxonomyPosts), arg0, arg1)
}

// DeleteTaxonomyTx mocks base method.
func (m *MockStore) DeleteTaxonomyTx(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTaxonomyTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTaxonomyTx indicates an expected call of DeleteTaxonomyTx.
func (mr *MockStoreMockRecorder) DeleteTaxonomyTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTaxonomyTx", reflect.TypeOf((*MockStore)(nil).DeleteTaxonomyTx), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// DeleteUserPost mocks base method.
func (m *MockStore) DeleteUserPost(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserPost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserPost indicates an expected call of DeleteUserPost.
func (mr *MockStoreMockRecorder) DeleteUserPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserPost", reflect.TypeOf((*MockStore)(nil).DeleteUserPost), arg0, arg1)
}

// DeleteUserPostsByUserID mocks base method.
func (m *MockStore) DeleteUserPostsByUserID(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserPostsByUserID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserPostsByUserID indicates an expected call of DeleteUserPostsByUserID.
func (mr *MockStoreMockRecorder) DeleteUserPostsByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserPostsByUserID", reflect.TypeOf((*MockStore)(nil).DeleteUserPostsByUserID), arg0, arg1)
}

// DeleteUserSessions mocks base method.
func (m *MockStore) DeleteUserSessions(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserSessions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserSessions indicates an expected call of DeleteUserSessions.
func (mr *MockStoreMockRecorder) DeleteUserSessions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserSessions", reflect.TypeOf((*MockStore)(nil).DeleteUserSessions), arg0, arg1)
}

// DeleteUserTx mocks base method.
func (m *MockStore) DeleteUserTx(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserTx indicates an expected call of DeleteUserTx.
func (mr *MockStoreMockRecorder) DeleteUserTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserTx", reflect.TypeOf((*MockStore)(nil).DeleteUserTx), arg0, arg1)
}

// DeleteUserWithTransferTx mocks base method.
func (m *MockStore) DeleteUserWithTransferTx(arg0 context.Context, arg1 db.DeleteUserWithTransferTxParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserWithTransferTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserWithTransferTx indicates an expected call of DeleteUserWithTransferTx.
func (mr *MockStoreMockRecorder) DeleteUserWithTransferTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserWithTransferTx", reflect.TypeOf((*MockStore)(nil).DeleteUserWithTransferTx), arg0, arg1)
}

// ExecTx mocks base method.
func (m *MockStore) ExecTx(arg0 context.Context, arg1 func(*db.Queries) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecTx indicates an expected call of ExecTx.
func (mr *MockStoreMockRecorder) ExecTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecTx", reflect.TypeOf((*MockStore)(nil).ExecTx), arg0, arg1)
}

// GetMedia mocks base method.
func (m *MockStore) GetMedia(arg0 context.Context, arg1 int64) (db.Medium, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMedia", arg0, arg1)
	ret0, _ := ret[0].(db.Medium)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMedia indicates an expected call of GetMedia.
func (mr *MockStoreMockRecorder) GetMedia(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMedia", reflect.TypeOf((*MockStore)(nil).GetMedia), arg0, arg1)
}

// GetMediaByPost mocks base method.
func (m *MockStore) GetMediaByPost(arg0 context.Context, arg1 int64) ([]db.Medium, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMediaByPost", arg0, arg1)
	ret0, _ := ret[0].([]db.Medium)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMediaByPost indicates an expected call of GetMediaByPost.
func (mr *MockStoreMockRecorder) GetMediaByPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMediaByPost", reflect.TypeOf((*MockStore)(nil).GetMediaByPost), arg0, arg1)
}

// GetMediaByUser mocks base method.
func (m *MockStore) GetMediaByUser(arg0 context.Context, arg1 db.GetMediaByUserParams) ([]db.GetMediaByUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMediaByUser", arg0, arg1)
	ret0, _ := ret[0].([]db.GetMediaByUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMediaByUser indicates an expected call of GetMediaByUser.
func (mr *MockStoreMockRecorder) GetMediaByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMediaByUser", reflect.TypeOf((*MockStore)(nil).GetMediaByUser), arg0, arg1)
}

// GetMediaPostCount mocks base method.
func (m *MockStore) GetMediaPostCount(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMediaPostCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMediaPostCount indicates an expected call of GetMediaPostCount.
func (mr *MockStoreMockRecorder) GetMediaPostCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMediaPostCount", reflect.TypeOf((*MockStore)(nil).GetMediaPostCount), arg0, arg1)
}

// GetPopularMedia mocks base method.
func (m *MockStore) GetPopularMedia(arg0 context.Context, arg1 int32) ([]db.GetPopularMediaRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPopularMedia", arg0, arg1)
	ret0, _ := ret[0].([]db.GetPopularMediaRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPopularMedia indicates an expected call of GetPopularMedia.
func (mr *MockStoreMockRecorder) GetPopularMedia(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPopularMedia", reflect.TypeOf((*MockStore)(nil).GetPopularMedia), arg0, arg1)
}

// GetPopularTaxonomies mocks base method.
func (m *MockStore) GetPopularTaxonomies(arg0 context.Context, arg1 int32) ([]db.GetPopularTaxonomiesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPopularTaxonomies", arg0, arg1)
	ret0, _ := ret[0].([]db.GetPopularTaxonomiesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPopularTaxonomies indicates an expected call of GetPopularTaxonomies.
func (mr *MockStoreMockRecorder) GetPopularTaxonomies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPopularTaxonomies", reflect.TypeOf((*MockStore)(nil).GetPopularTaxonomies), arg0, arg1)
}

// GetPost mocks base method.
func (m *MockStore) GetPost(arg0 context.Context, arg1 int64) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", arg0, arg1)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockStoreMockRecorder) GetPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockStore)(nil).GetPost), arg0, arg1)
}

// GetPostMediaCount mocks base method.
func (m *MockStore) GetPostMediaCount(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostMediaCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostMediaCount indicates an expected call of GetPostMediaCount.
func (mr *MockStoreMockRecorder) GetPostMediaCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostMediaCount", reflect.TypeOf((*MockStore)(nil).GetPostMediaCount), arg0, arg1)
}

// GetPostTaxonomies mocks base method.
func (m *MockStore) GetPostTaxonomies(arg0 context.Context, arg1 int64) ([]db.Taxonomy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostTaxonomies", arg0, arg1)
	ret0, _ := ret[0].([]db.Taxonomy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostTaxonomies indicates an expected call of GetPostTaxonomies.
func (mr *MockStoreMockRecorder) GetPostTaxonomies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostTaxonomies", reflect.TypeOf((*MockStore)(nil).GetPostTaxonomies), arg0, arg1)
}

// GetPostTaxonomyCount mocks base method.
func (m *MockStore) GetPostTaxonomyCount(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostTaxonomyCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostTaxonomyCount indicates an expected call of GetPostTaxonomyCount.
func (mr *MockStoreMockRecorder) GetPostTaxonomyCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostTaxonomyCount", reflect.TypeOf((*MockStore)(nil).GetPostTaxonomyCount), arg0, arg1)
}

// GetPostWithMedia mocks base method.
func (m *MockStore) GetPostWithMedia(arg0 context.Context, arg1 int64) (db.GetPostWithMediaRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostWithMedia", arg0, arg1)
	ret0, _ := ret[0].(db.GetPostWithMediaRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostWithMedia indicates an expected call of GetPostWithMedia.
func (mr *MockStoreMockRecorder) GetPostWithMedia(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostWithMedia", reflect.TypeOf((*MockStore)(nil).GetPostWithMedia), arg0, arg1)
}

// GetPostsByUserWithMedia mocks base method.
func (m *MockStore) GetPostsByUserWithMedia(arg0 context.Context, arg1 db.GetPostsByUserWithMediaParams) ([]db.GetPostsByUserWithMediaRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByUserWithMedia", arg0, arg1)
	ret0, _ := ret[0].([]db.GetPostsByUserWithMediaRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsByUserWithMedia indicates an expected call of GetPostsByUserWithMedia.
func (mr *MockStoreMockRecorder) GetPostsByUserWithMedia(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByUserWithMedia", reflect.TypeOf((*MockStore)(nil).GetPostsByUserWithMedia), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockStore) GetSession(arg0 context.Context, arg1 uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockStoreMockRecorder) GetSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStore)(nil).GetSession), arg0, arg1)
}

// GetTaxonomy mocks base method.
func (m *MockStore) GetTaxonomy(arg0 context.Context, arg1 int64) (db.Taxonomy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaxonomy", arg0, arg1)
	ret0, _ := ret[0].(db.Taxonomy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaxonomy indicates an expected call of GetTaxonomy.
func (mr *MockStoreMockRecorder) GetTaxonomy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaxonomy", reflect.TypeOf((*MockStore)(nil).GetTaxonomy), arg0, arg1)
}

// GetTaxonomyByName mocks base method.
func (m *MockStore) GetTaxonomyByName(arg0 context.Context, arg1 string) (db.Taxonomy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaxonomyByName", arg0, arg1)
	ret0, _ := ret[0].(db.Taxonomy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaxonomyByName indicates an expected call of GetTaxonomyByName.
func (mr *MockStoreMockRecorder) GetTaxonomyByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaxonomyByName", reflect.TypeOf((*MockStore)(nil).GetTaxonomyByName), arg0, arg1)
}

// GetTaxonomyPostCount mocks base method.
func (m *MockStore) GetTaxonomyPostCount(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaxonomyPostCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaxonomyPostCount indicates an expected call of GetTaxonomyPostCount.
func (mr *MockStoreMockRecorder) GetTaxonomyPostCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaxonomyPostCount", reflect.TypeOf((*MockStore)(nil).GetTaxonomyPostCount), arg0, arg1)
}

// GetTaxonomyPosts mocks base method.
func (m *MockStore) GetTaxonomyPosts(arg0 context.Context, arg1 db.GetTaxonomyPostsParams) ([]db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaxonomyPosts", arg0, arg1)
	ret0, _ := ret[0].([]db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaxonomyPosts indicates an expected call of GetTaxonomyPosts.
func (mr *MockStoreMockRecorder) GetTaxonomyPosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaxonomyPosts", reflect.TypeOf((*MockStore)(nil).GetTaxonomyPosts), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserByUsername mocks base method.
func (m *MockStore) GetUserByUsername(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockStoreMockRecorder) GetUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockStore)(nil).GetUserByUsername), arg0, arg1)
}

// GetUserMediaCount mocks base method.
func (m *MockStore) GetUserMediaCount(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserMediaCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserMediaCount indicates an expected call of GetUserMediaCount.
func (mr *MockStoreMockRecorder) GetUserMediaCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserMediaCount", reflect.TypeOf((*MockStore)(nil).GetUserMediaCount), arg0, arg1)
}

// ListMedia mocks base method.
func (m *MockStore) ListMedia(arg0 context.Context, arg1 db.ListMediaParams) ([]db.ListMediaRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMedia", arg0, arg1)
	ret0, _ := ret[0].([]db.ListMediaRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMedia indicates an expected call of ListMedia.
func (mr *MockStoreMockRecorder) ListMedia(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMedia", reflect.TypeOf((*MockStore)(nil).ListMedia), arg0, arg1)
}

// ListPosts mocks base method.
func (m *MockStore) ListPosts(arg0 context.Context, arg1 db.ListPostsParams) ([]db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPosts", arg0, arg1)
	ret0, _ := ret[0].([]db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPosts indicates an expected call of ListPosts.
func (mr *MockStoreMockRecorder) ListPosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPosts", reflect.TypeOf((*MockStore)(nil).ListPosts), arg0, arg1)
}

// ListPostsWithMedia mocks base method.
func (m *MockStore) ListPostsWithMedia(arg0 context.Context, arg1 db.ListPostsWithMediaParams) ([]db.ListPostsWithMediaRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPostsWithMedia", arg0, arg1)
	ret0, _ := ret[0].([]db.ListPostsWithMediaRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPostsWithMedia indicates an expected call of ListPostsWithMedia.
func (mr *MockStoreMockRecorder) ListPostsWithMedia(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPostsWithMedia", reflect.TypeOf((*MockStore)(nil).ListPostsWithMedia), arg0, arg1)
}

// ListSessionsByUser mocks base method.
func (m *MockStore) ListSessionsByUser(arg0 context.Context, arg1 int64) ([]db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSessionsByUser", arg0, arg1)
	ret0, _ := ret[0].([]db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSessionsByUser indicates an expected call of ListSessionsByUser.
func (mr *MockStoreMockRecorder) ListSessionsByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSessionsByUser", reflect.TypeOf((*MockStore)(nil).ListSessionsByUser), arg0, arg1)
}

// ListSessionsByUsername mocks base method.
func (m *MockStore) ListSessionsByUsername(arg0 context.Context, arg1 string) ([]db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSessionsByUsername", arg0, arg1)
	ret0, _ := ret[0].([]db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSessionsByUsername indicates an expected call of ListSessionsByUsername.
func (mr *MockStoreMockRecorder) ListSessionsByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSessionsByUsername", reflect.TypeOf((*MockStore)(nil).ListSessionsByUsername), arg0, arg1)
}

// ListTaxonomies mocks base method.
func (m *MockStore) ListTaxonomies(arg0 context.Context, arg1 db.ListTaxonomiesParams) ([]db.Taxonomy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTaxonomies", arg0, arg1)
	ret0, _ := ret[0].([]db.Taxonomy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTaxonomies indicates an expected call of ListTaxonomies.
func (mr *MockStoreMockRecorder) ListTaxonomies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTaxonomies", reflect.TypeOf((*MockStore)(nil).ListTaxonomies), arg0, arg1)
}

// ListTaxonomiesWithPostCount mocks base method.
func (m *MockStore) ListTaxonomiesWithPostCount(arg0 context.Context, arg1 db.ListTaxonomiesWithPostCountParams) ([]db.ListTaxonomiesWithPostCountRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTaxonomiesWithPostCount", arg0, arg1)
	ret0, _ := ret[0].([]db.ListTaxonomiesWithPostCountRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTaxonomiesWithPostCount indicates an expected call of ListTaxonomiesWithPostCount.
func (mr *MockStoreMockRecorder) ListTaxonomiesWithPostCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTaxonomiesWithPostCount", reflect.TypeOf((*MockStore)(nil).ListTaxonomiesWithPostCount), arg0, arg1)
}

// ListUsers mocks base method.
func (m *MockStore) ListUsers(arg0 context.Context, arg1 db.ListUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStoreMockRecorder) ListUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStore)(nil).ListUsers), arg0, arg1)
}

// SearchMediaByName mocks base method.
func (m *MockStore) SearchMediaByName(arg0 context.Context, arg1 db.SearchMediaByNameParams) ([]db.SearchMediaByNameRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMediaByName", arg0, arg1)
	ret0, _ := ret[0].([]db.SearchMediaByNameRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMediaByName indicates an expected call of SearchMediaByName.
func (mr *MockStoreMockRecorder) SearchMediaByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMediaByName", reflect.TypeOf((*MockStore)(nil).SearchMediaByName), arg0, arg1)
}

// SearchTaxonomiesByName mocks base method.
func (m *MockStore) SearchTaxonomiesByName(arg0 context.Context, arg1 db.SearchTaxonomiesByNameParams) ([]db.Taxonomy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTaxonomiesByName", arg0, arg1)
	ret0, _ := ret[0].([]db.Taxonomy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTaxonomiesByName indicates an expected call of SearchTaxonomiesByName.
func (mr *MockStoreMockRecorder) SearchTaxonomiesByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTaxonomiesByName", reflect.TypeOf((*MockStore)(nil).SearchTaxonomiesByName), arg0, arg1)
}

// TransferMediaToUser mocks base method.
func (m *MockStore) TransferMediaToUser(arg0 context.Context, arg1 db.TransferMediaToUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferMediaToUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferMediaToUser indicates an expected call of TransferMediaToUser.
func (mr *MockStoreMockRecorder) TransferMediaToUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferMediaToUser", reflect.TypeOf((*MockStore)(nil).TransferMediaToUser), arg0, arg1)
}

// TransferPostsToAdmin mocks base method.
func (m *MockStore) TransferPostsToAdmin(arg0 context.Context, arg1 db.TransferPostsToAdminParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferPostsToAdmin", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferPostsToAdmin indicates an expected call of TransferPostsToAdmin.
func (mr *MockStoreMockRecorder) TransferPostsToAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferPostsToAdmin", reflect.TypeOf((*MockStore)(nil).TransferPostsToAdmin), arg0, arg1)
}

// UpdateMedia mocks base method.
func (m *MockStore) UpdateMedia(arg0 context.Context, arg1 db.UpdateMediaParams) (db.Medium, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMedia", arg0, arg1)
	ret0, _ := ret[0].(db.Medium)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMedia indicates an expected call of UpdateMedia.
func (mr *MockStoreMockRecorder) UpdateMedia(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMedia", reflect.TypeOf((*MockStore)(nil).UpdateMedia), arg0, arg1)
}

// UpdatePost mocks base method.
func (m *MockStore) UpdatePost(arg0 context.Context, arg1 db.UpdatePostParams) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", arg0, arg1)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockStoreMockRecorder) UpdatePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockStore)(nil).UpdatePost), arg0, arg1)
}

// UpdatePostMediaTx mocks base method.
func (m *MockStore) UpdatePostMediaTx(arg0 context.Context, arg1 db.UpdatePostMediaTxParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePostMediaTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePostMediaTx indicates an expected call of UpdatePostMediaTx.
func (mr *MockStoreMockRecorder) UpdatePostMediaTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePostMediaTx", reflect.TypeOf((*MockStore)(nil).UpdatePostMediaTx), arg0, arg1)
}

// UpdatePostTaxonomiesTx mocks base method.
func (m *MockStore) UpdatePostTaxonomiesTx(arg0 context.Context, arg1 db.UpdatePostTaxonomiesTxParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePostTaxonomiesTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePostTaxonomiesTx indicates an expected call of UpdatePostTaxonomiesTx.
func (mr *MockStoreMockRecorder) UpdatePostTaxonomiesTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePostTaxonomiesTx", reflect.TypeOf((*MockStore)(nil).UpdatePostTaxonomiesTx), arg0, arg1)
}

// UpdatePostsUsername mocks base method.
func (m *MockStore) UpdatePostsUsername(arg0 context.Context, arg1 db.UpdatePostsUsernameParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePostsUsername", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePostsUsername indicates an expected call of UpdatePostsUsername.
func (mr *MockStoreMockRecorder) UpdatePostsUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePostsUsername", reflect.TypeOf((*MockStore)(nil).UpdatePostsUsername), arg0, arg1)
}

// UpdateSession mocks base method.
func (m *MockStore) UpdateSession(arg0 context.Context, arg1 db.UpdateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSession indicates an expected call of UpdateSession.
func (mr *MockStoreMockRecorder) UpdateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSession", reflect.TypeOf((*MockStore)(nil).UpdateSession), arg0, arg1)
}

// UpdateSessionsUsername mocks base method.
func (m *MockStore) UpdateSessionsUsername(arg0 context.Context, arg1 db.UpdateSessionsUsernameParams) ([]db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSessionsUsername", arg0, arg1)
	ret0, _ := ret[0].([]db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSessionsUsername indicates an expected call of UpdateSessionsUsername.
func (mr *MockStoreMockRecorder) UpdateSessionsUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSessionsUsername", reflect.TypeOf((*MockStore)(nil).UpdateSessionsUsername), arg0, arg1)
}

// UpdateTaxonomy mocks base method.
func (m *MockStore) UpdateTaxonomy(arg0 context.Context, arg1 db.UpdateTaxonomyParams) (db.Taxonomy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaxonomy", arg0, arg1)
	ret0, _ := ret[0].(db.Taxonomy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTaxonomy indicates an expected call of UpdateTaxonomy.
func (mr *MockStoreMockRecorder) UpdateTaxonomy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaxonomy", reflect.TypeOf((*MockStore)(nil).UpdateTaxonomy), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}

// UpdateUserPostsOwnership mocks base method.
func (m *MockStore) UpdateUserPostsOwnership(arg0 context.Context, arg1 db.UpdateUserPostsOwnershipParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPostsOwnership", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPostsOwnership indicates an expected call of UpdateUserPostsOwnership.
func (mr *MockStoreMockRecorder) UpdateUserPostsOwnership(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPostsOwnership", reflect.TypeOf((*MockStore)(nil).UpdateUserPostsOwnership), arg0, arg1)
}

// UpdateUserTx mocks base method.
func (m *MockStore) UpdateUserTx(arg0 context.Context, arg1 db.UpdateUserTxParams) (db.UpdateUserTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserTx", arg0, arg1)
	ret0, _ := ret[0].(db.UpdateUserTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserTx indicates an expected call of UpdateUserTx.
func (mr *MockStoreMockRecorder) UpdateUserTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserTx", reflect.TypeOf((*MockStore)(nil).UpdateUserTx), arg0, arg1)
}
