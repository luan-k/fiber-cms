// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: post.sql

package db

import (
	"context"
)

const countTotalPosts = `-- name: CountTotalPosts :one
SELECT COUNT(*) AS total FROM posts
`

func (q *Queries) CountTotalPosts(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTotalPosts)
	var total int64
	err := row.Scan(&total)
	return total, err
}

const createPosts = `-- name: CreatePosts :one
INSERT INTO posts (
    title,
    description,
    user_id,
    username,
    content,
    url
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, title, description, content, user_id, username, url, created_at, changed_at
`

type CreatePostsParams struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	UserID      int64  `json:"user_id"`
	Username    string `json:"username"`
	Content     string `json:"content"`
	Url         string `json:"url"`
}

func (q *Queries) CreatePosts(ctx context.Context, arg CreatePostsParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPosts,
		arg.Title,
		arg.Description,
		arg.UserID,
		arg.Username,
		arg.Content,
		arg.Url,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Content,
		&i.UserID,
		&i.Username,
		&i.Url,
		&i.CreatedAt,
		&i.ChangedAt,
	)
	return i, err
}

const createUserPost = `-- name: CreateUserPost :one
INSERT INTO user_posts (
    post_id,
    user_id,
    "order"
) VALUES (
    $1, $2, $3
) RETURNING post_id, user_id, "order"
`

type CreateUserPostParams struct {
	PostID int64 `json:"post_id"`
	UserID int64 `json:"user_id"`
	Order  int32 `json:"order"`
}

func (q *Queries) CreateUserPost(ctx context.Context, arg CreateUserPostParams) (UserPost, error) {
	row := q.db.QueryRowContext(ctx, createUserPost, arg.PostID, arg.UserID, arg.Order)
	var i UserPost
	err := row.Scan(&i.PostID, &i.UserID, &i.Order)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts
WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const deleteUserPost = `-- name: DeleteUserPost :exec
DELETE FROM user_posts
WHERE post_id = $1
`

func (q *Queries) DeleteUserPost(ctx context.Context, postID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserPost, postID)
	return err
}

const getPost = `-- name: GetPost :one
SELECT id, title, description, content, user_id, username, url, created_at, changed_at FROM posts 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Content,
		&i.UserID,
		&i.Username,
		&i.Url,
		&i.CreatedAt,
		&i.ChangedAt,
	)
	return i, err
}

const listPosts = `-- name: ListPosts :many
SELECT id, title, description, content, user_id, username, url, created_at, changed_at FROM posts 
ORDER BY id DESC
LIMIT $1
OFFSET $2
`

type ListPostsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPosts(ctx context.Context, arg ListPostsParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, listPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Content,
			&i.UserID,
			&i.Username,
			&i.Url,
			&i.CreatedAt,
			&i.ChangedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts
SET title = COALESCE($1, title),
    description = COALESCE($2, description),
    user_id = COALESCE($3, user_id),
    username = COALESCE($4, username),
    content = COALESCE($5, content),
    url = COALESCE($6, url),
    changed_at = now()
WHERE id = $7
RETURNING id, title, description, content, user_id, username, url, created_at, changed_at
`

type UpdatePostParams struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	UserID      int64  `json:"user_id"`
	Username    string `json:"username"`
	Content     string `json:"content"`
	Url         string `json:"url"`
	ID          int64  `json:"id"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePost,
		arg.Title,
		arg.Description,
		arg.UserID,
		arg.Username,
		arg.Content,
		arg.Url,
		arg.ID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Content,
		&i.UserID,
		&i.Username,
		&i.Url,
		&i.CreatedAt,
		&i.ChangedAt,
	)
	return i, err
}
