// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: taxonomies.sql

package db

import (
	"context"
	"database/sql"
)

const countTotalTaxonomies = `-- name: CountTotalTaxonomies :one
SELECT COUNT(*) AS total FROM taxonomies
`

func (q *Queries) CountTotalTaxonomies(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTotalTaxonomies)
	var total int64
	err := row.Scan(&total)
	return total, err
}

const createPostTaxonomy = `-- name: CreatePostTaxonomy :one
INSERT INTO posts_taxonomies (
    post_id,
    taxonomy_id
) VALUES (
    $1, $2
) RETURNING post_id, taxonomy_id
`

type CreatePostTaxonomyParams struct {
	PostID     int64 `json:"post_id"`
	TaxonomyID int64 `json:"taxonomy_id"`
}

func (q *Queries) CreatePostTaxonomy(ctx context.Context, arg CreatePostTaxonomyParams) (PostsTaxonomy, error) {
	row := q.db.QueryRowContext(ctx, createPostTaxonomy, arg.PostID, arg.TaxonomyID)
	var i PostsTaxonomy
	err := row.Scan(&i.PostID, &i.TaxonomyID)
	return i, err
}

const createTaxonomy = `-- name: CreateTaxonomy :one
INSERT INTO taxonomies (
    name,
    description
) VALUES (
    $1, $2
) RETURNING id, name, description
`

type CreateTaxonomyParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreateTaxonomy(ctx context.Context, arg CreateTaxonomyParams) (Taxonomy, error) {
	row := q.db.QueryRowContext(ctx, createTaxonomy, arg.Name, arg.Description)
	var i Taxonomy
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const deletePostTaxonomies = `-- name: DeletePostTaxonomies :exec
DELETE FROM posts_taxonomies
WHERE post_id = $1
`

func (q *Queries) DeletePostTaxonomies(ctx context.Context, postID int64) error {
	_, err := q.db.ExecContext(ctx, deletePostTaxonomies, postID)
	return err
}

const deletePostTaxonomy = `-- name: DeletePostTaxonomy :exec
DELETE FROM posts_taxonomies
WHERE post_id = $1 AND taxonomy_id = $2
`

type DeletePostTaxonomyParams struct {
	PostID     int64 `json:"post_id"`
	TaxonomyID int64 `json:"taxonomy_id"`
}

func (q *Queries) DeletePostTaxonomy(ctx context.Context, arg DeletePostTaxonomyParams) error {
	_, err := q.db.ExecContext(ctx, deletePostTaxonomy, arg.PostID, arg.TaxonomyID)
	return err
}

const deleteTaxonomy = `-- name: DeleteTaxonomy :exec
DELETE FROM taxonomies
WHERE id = $1
`

func (q *Queries) DeleteTaxonomy(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTaxonomy, id)
	return err
}

const deleteTaxonomyPosts = `-- name: DeleteTaxonomyPosts :exec
DELETE FROM posts_taxonomies
WHERE taxonomy_id = $1
`

func (q *Queries) DeleteTaxonomyPosts(ctx context.Context, taxonomyID int64) error {
	_, err := q.db.ExecContext(ctx, deleteTaxonomyPosts, taxonomyID)
	return err
}

const getPopularTaxonomies = `-- name: GetPopularTaxonomies :many
SELECT 
    t.id, t.name, t.description,
    COUNT(pt.post_id) as post_count
FROM taxonomies t
JOIN posts_taxonomies pt ON t.id = pt.taxonomy_id
GROUP BY t.id, t.name, t.description
HAVING COUNT(pt.post_id) > 0
ORDER BY COUNT(pt.post_id) DESC
LIMIT $1
`

type GetPopularTaxonomiesRow struct {
	ID          int64  `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
	PostCount   int64  `json:"post_count"`
}

func (q *Queries) GetPopularTaxonomies(ctx context.Context, limit int32) ([]GetPopularTaxonomiesRow, error) {
	rows, err := q.db.QueryContext(ctx, getPopularTaxonomies, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPopularTaxonomiesRow{}
	for rows.Next() {
		var i GetPopularTaxonomiesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.PostCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostTaxonomies = `-- name: GetPostTaxonomies :many
SELECT t.id, t.name, t.description FROM taxonomies t
JOIN posts_taxonomies pt ON t.id = pt.taxonomy_id
WHERE pt.post_id = $1
ORDER BY t.name
`

func (q *Queries) GetPostTaxonomies(ctx context.Context, postID int64) ([]Taxonomy, error) {
	rows, err := q.db.QueryContext(ctx, getPostTaxonomies, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Taxonomy{}
	for rows.Next() {
		var i Taxonomy
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostTaxonomyCount = `-- name: GetPostTaxonomyCount :one
SELECT COUNT(*) FROM posts_taxonomies
WHERE post_id = $1
`

func (q *Queries) GetPostTaxonomyCount(ctx context.Context, postID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPostTaxonomyCount, postID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getTaxonomy = `-- name: GetTaxonomy :one
SELECT id, name, description FROM taxonomies
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTaxonomy(ctx context.Context, id int64) (Taxonomy, error) {
	row := q.db.QueryRowContext(ctx, getTaxonomy, id)
	var i Taxonomy
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const getTaxonomyByName = `-- name: GetTaxonomyByName :one
SELECT id, name, description FROM taxonomies
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetTaxonomyByName(ctx context.Context, name string) (Taxonomy, error) {
	row := q.db.QueryRowContext(ctx, getTaxonomyByName, name)
	var i Taxonomy
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const getTaxonomyPostCount = `-- name: GetTaxonomyPostCount :one
SELECT COUNT(*) FROM posts_taxonomies
WHERE taxonomy_id = $1
`

func (q *Queries) GetTaxonomyPostCount(ctx context.Context, taxonomyID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTaxonomyPostCount, taxonomyID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getTaxonomyPosts = `-- name: GetTaxonomyPosts :many
SELECT p.id, p.title, p.description, p.content, p.user_id, p.username, p.url, p.created_at, p.changed_at FROM posts p
JOIN posts_taxonomies pt ON p.id = pt.post_id
WHERE pt.taxonomy_id = $1
ORDER BY p.created_at DESC
LIMIT $2
OFFSET $3
`

type GetTaxonomyPostsParams struct {
	TaxonomyID int64 `json:"taxonomy_id"`
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
}

func (q *Queries) GetTaxonomyPosts(ctx context.Context, arg GetTaxonomyPostsParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getTaxonomyPosts, arg.TaxonomyID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Content,
			&i.UserID,
			&i.Username,
			&i.Url,
			&i.CreatedAt,
			&i.ChangedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTaxonomies = `-- name: ListTaxonomies :many
SELECT id, name, description FROM taxonomies
ORDER BY name
LIMIT $1
OFFSET $2
`

type ListTaxonomiesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTaxonomies(ctx context.Context, arg ListTaxonomiesParams) ([]Taxonomy, error) {
	rows, err := q.db.QueryContext(ctx, listTaxonomies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Taxonomy{}
	for rows.Next() {
		var i Taxonomy
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTaxonomiesWithPostCount = `-- name: ListTaxonomiesWithPostCount :many
SELECT 
    t.id, t.name, t.description,
    COUNT(pt.post_id) as post_count
FROM taxonomies t
LEFT JOIN posts_taxonomies pt ON t.id = pt.taxonomy_id
GROUP BY t.id, t.name, t.description
ORDER BY t.name
LIMIT $1
OFFSET $2
`

type ListTaxonomiesWithPostCountParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListTaxonomiesWithPostCountRow struct {
	ID          int64  `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
	PostCount   int64  `json:"post_count"`
}

func (q *Queries) ListTaxonomiesWithPostCount(ctx context.Context, arg ListTaxonomiesWithPostCountParams) ([]ListTaxonomiesWithPostCountRow, error) {
	rows, err := q.db.QueryContext(ctx, listTaxonomiesWithPostCount, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListTaxonomiesWithPostCountRow{}
	for rows.Next() {
		var i ListTaxonomiesWithPostCountRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.PostCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchTaxonomiesByName = `-- name: SearchTaxonomiesByName :many
SELECT id, name, description FROM taxonomies
WHERE name ILIKE '%' || $1 || '%'
ORDER BY name
LIMIT $2
OFFSET $3
`

type SearchTaxonomiesByNameParams struct {
	Column1 sql.NullString `json:"column_1"`
	Limit   int32          `json:"limit"`
	Offset  int32          `json:"offset"`
}

func (q *Queries) SearchTaxonomiesByName(ctx context.Context, arg SearchTaxonomiesByNameParams) ([]Taxonomy, error) {
	rows, err := q.db.QueryContext(ctx, searchTaxonomiesByName, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Taxonomy{}
	for rows.Next() {
		var i Taxonomy
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTaxonomy = `-- name: UpdateTaxonomy :one
UPDATE taxonomies 
SET 
    name = COALESCE($2, name),
    description = COALESCE($3, description)
WHERE id = $1
RETURNING id, name, description
`

type UpdateTaxonomyParams struct {
	ID          int64  `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) UpdateTaxonomy(ctx context.Context, arg UpdateTaxonomyParams) (Taxonomy, error) {
	row := q.db.QueryRowContext(ctx, updateTaxonomy, arg.ID, arg.Name, arg.Description)
	var i Taxonomy
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}
