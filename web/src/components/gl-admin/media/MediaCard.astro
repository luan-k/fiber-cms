---
import { getMediaURL } from '../../../lib/api';
import type { Media } from '../../../lib/types';

interface Props {
  media: Media;
}

const { media } = Astro.props;

function getFileType(mediaPath: string): string {
  const ext = mediaPath.split('.').pop()?.toLowerCase();
  if (['jpg', 'jpeg', 'png', 'gif', 'webp', 'bmp', 'svg'].includes(ext || '')) return 'image';
  if (['mp4', 'mov', 'avi', 'mkv', 'webm'].includes(ext || '')) return 'video';
  if (['mp3', 'wav', 'ogg', 'm4a'].includes(ext || '')) return 'audio';
  if (['pdf'].includes(ext || '')) return 'pdf';
  if (['doc', 'docx'].includes(ext || '')) return 'document';
  return 'file';
}

function getFileIcon(mediaPath: string): string {
  const ext = mediaPath.split('.').pop()?.toLowerCase();
  if (['jpg', 'jpeg', 'png', 'gif', 'webp', 'bmp', 'svg'].includes(ext || '')) return 'üñºÔ∏è';
  if (['mp4', 'mov', 'avi', 'mkv', 'webm'].includes(ext || '')) return 'üé•';
  if (['mp3', 'wav', 'ogg', 'm4a'].includes(ext || '')) return 'üéµ';
  if (['pdf'].includes(ext || '')) return 'üìÑ';
  if (['doc', 'docx'].includes(ext || '')) return 'üìù';
  return 'üìÅ';
}

function formatFileSize(bytes: number): string {
  if (bytes === 0) return '0 B';
  const k = 1024;
  const sizes = ['B', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

function isImage(mediaPath: string): boolean {
  const ext = mediaPath.split('.').pop()?.toLowerCase();
  return ['jpg', 'jpeg', 'png', 'gif', 'webp', 'bmp'].includes(ext || '');
}

const fileType = getFileType(media.media_path);
const fileIcon = getFileIcon(media.media_path);
const mediaURL = getMediaURL(media.media_path);
const fileName = media.name;
const fileSize = media.file_size ? formatFileSize(media.file_size) : 'Unknown size';
const postCount = media.post_count || 0;
---

<div class="gl-admin-media-card" data-id={media.id}>
  <div class="gl-admin-media-card__thumbnail">
    <div class="gl-admin-media-card__type-badge" data-type={fileType}>
      {fileType}
    </div>
    
    {isImage(media.media_path) ? (
      <img 
        src={mediaURL} 
        alt={media.alt} 
        loading="lazy" 
        class="gl-admin-media-card__image"
      />
    ) : (
      <div class="gl-admin-media-card__file-icon">
        {fileIcon}
      </div>
    )}
    
    <div class="gl-admin-media-card__overlay">
      <button class="gl-admin-media-card__action gl-admin-media-card__action--edit" data-id={media.id} title="Edit">
        ‚úèÔ∏è
      </button>
      <button class="gl-admin-media-card__action gl-admin-media-card__action--delete" data-id={media.id} title="Delete">
        üóëÔ∏è
      </button>
      <button class="gl-admin-media-card__action gl-admin-media-card__action--copy" data-path={media.media_path} title="Copy URL">
        üìã
      </button>
    </div>
  </div>
  
  <div class="gl-admin-media-card__content">
    <h4 class="gl-admin-media-card__title" title={fileName}>
      {fileName}
    </h4>
    
    <div class="gl-admin-media-card__meta">
      <span class="gl-admin-media-card__size">
        {fileSize}
      </span>
      
      {postCount > 0 && (
        <span class="gl-admin-media-card__posts">
          {postCount} {postCount === 1 ? 'post' : 'posts'}
        </span>
      )}
    </div>
  </div>
</div>