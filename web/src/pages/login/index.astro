---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { SITE_TITLE } from '../../consts';
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={`Login - ${SITE_TITLE}`} description="Login to access admin features" />
    <style>
      .login-container {
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 70vh;
        padding: 2rem 1rem;
      }
      
      .login-form {
        background: white;
        border: 1px solid rgb(var(--gray-light));
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(var(--gray), 10%);
        padding: 3rem;
        width: 100%;
        max-width: 400px;
      }
      
      .login-form h1 {
        color: rgb(var(--black));
        font-size: 2rem;
        margin: 0 0 0.5rem 0;
        text-align: center;
      }
      
      .login-form p {
        color: rgb(var(--gray));
        margin: 0 0 2rem 0;
        text-align: center;
      }
      
      .form-group {
        margin-bottom: 1.5rem;
      }
      
      .form-group label {
        color: rgb(var(--black));
        display: block;
        font-weight: 500;
        margin-bottom: 0.5rem;
      }
      
      .form-group input {
        border: 1px solid rgb(var(--gray-light));
        border-radius: 6px;
        font-size: 1rem;
        padding: 0.75rem;
        width: 100%;
        transition: border-color 0.2s ease;
      }
      
      .form-group input:focus {
        border-color: var(--accent);
        box-shadow: 0 0 0 2px rgba(var(--accent), 0.1);
        outline: none;
      }
      
      .login-button {
        background: var(--accent);
        border: none;
        border-radius: 6px;
        color: white;
        cursor: pointer;
        font-size: 1rem;
        font-weight: 500;
        padding: 0.875rem;
        width: 100%;
        transition: background 0.2s ease;
      }
      
      .login-button:hover {
        background: var(--accent-dark);
      }
      
      .login-button:disabled {
        background: rgb(var(--gray-light));
        cursor: not-allowed;
      }
      
      .error-message {
        background: #fee;
        border: 1px solid #fcc;
        border-radius: 6px;
        color: #c00;
        margin-bottom: 1rem;
        padding: 0.75rem;
        text-align: center;
      }
      
      .loading {
        display: inline-block;
        animation: spin 1s linear infinite;
      }
      
      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
    </style>
  </head>
  <body>
    <Header />
    <main>
      <div class="login-container">
        <form class="login-form" id="loginForm">
          <h1>üîê Admin Login</h1>
          <p>Sign in to access the admin dashboard</p>
          
          <div id="errorMessage" class="error-message" style="display: none;"></div>
          
          <div class="form-group">
            <label for="username">Username</label>
            <input 
              type="text" 
              id="username" 
              name="username" 
              required 
              autocomplete="username"
            />
          </div>
          
          <div class="form-group">
            <label for="password">Password</label>
            <input 
              type="password" 
              id="password" 
              name="password" 
              required 
              autocomplete="current-password"
            />
          </div>
          
          <button type="submit" class="login-button" id="loginButton">
            <span id="buttonText">Sign In</span>
            <span id="buttonLoading" class="loading" style="display: none;">‚è≥</span>
          </button>
        </form>
      </div>
    </main>
    <Footer />
    
    <script>
      import { authManager } from '../../lib/auth.ts';
      
      const form = document.getElementById('loginForm') as HTMLFormElement;
      const errorMessage = document.getElementById('errorMessage') as HTMLDivElement;
      const loginButton = document.getElementById('loginButton') as HTMLButtonElement;
      const buttonText = document.getElementById('buttonText') as HTMLSpanElement;
      const buttonLoading = document.getElementById('buttonLoading') as HTMLSpanElement;
      
      const authState = authManager.getState();
      if (authState.isAuthenticated) {
        const redirectTo = new URLSearchParams(window.location.search).get('redirect') || '/gl-admin';
        window.location.href = redirectTo;
      }
      
      function showError(message: string) {
        errorMessage.textContent = message;
        errorMessage.style.display = 'block';
      }
      
      function hideError() {
        errorMessage.style.display = 'none';
      }
      
      function setLoading(loading: boolean) {
        loginButton.disabled = loading;
        buttonText.style.display = loading ? 'none' : 'inline';
        buttonLoading.style.display = loading ? 'inline' : 'none';
      }
      
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        hideError();
        setLoading(true);
        
        const formData = new FormData(form);
        const username = formData.get('username') as string;
        const password = formData.get('password') as string;
        
        try {
          const result = await authManager.login(username, password);
          
          if (result.success) {
            const redirectTo = new URLSearchParams(window.location.search).get('redirect') || '/gl-admin';
            window.location.href = redirectTo;
          } else {
            showError(result.error || 'Login failed');
          }
        } catch (error) {
          showError('An unexpected error occurred');
        } finally {
          setLoading(false);
        }
      });
    </script>
  </body>
</html>