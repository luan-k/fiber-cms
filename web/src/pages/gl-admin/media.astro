---
// filepath: c:\Projects\go-live-cms\web\src\pages\gl-admin\media.astro
import Admin from '@/layouts/Admin/Layout.astro';
import "@/assets/styles/admin/media-page.scss";
import { api, getMediaURL } from '@/lib/api';
import type { Media } from '@/lib/types';

let mediaItems: Media[] = [];
let error: string | null = null;
let total = 0;

try {
  const response = await api.getMedia();
  mediaItems = response.data;
  total = response.meta.total;
} catch (e) {
  error = e instanceof Error ? e.message : 'Failed to fetch media';
  console.error('Error fetching media:', e);
}

function getFileIcon(mediaPath: string): string {
  const ext = mediaPath.split('.').pop()?.toLowerCase();
  if (['jpg', 'jpeg', 'png', 'gif', 'webp', 'bmp', 'svg'].includes(ext || '')) return '🖼️';
  if (['mp4', 'mov', 'avi', 'mkv', 'webm'].includes(ext || '')) return '🎥';
  if (['mp3', 'wav', 'ogg', 'm4a'].includes(ext || '')) return '🎵';
  if (['pdf'].includes(ext || '')) return '📄';
  if (['doc', 'docx'].includes(ext || '')) return '📝';
  return '📁';
}

function isImage(mediaPath: string): boolean {
  const ext = mediaPath.split('.').pop()?.toLowerCase();
  return ['jpg', 'jpeg', 'png', 'gif', 'webp', 'bmp'].includes(ext || '');
}
---

<Admin title="Media Library" description="Manage your media files">
  <div class="media-library">
    <!-- Header -->
    <div class="media-header">
      <div class="header-left">
        <h1>📸 Media Library</h1>
        <p class="media-count">{total} {total === 1 ? 'item' : 'items'}</p>
      </div>
      <div class="header-actions">
        <button class="btn btn-secondary" id="grid-view" title="Grid View">
          <span>⊞</span>
        </button>
        <button class="btn btn-secondary" id="list-view" title="List View">
          <span>☰</span>
        </button>
        <div class="search-box">
          <input type="text" id="media-search" placeholder="Search media..." />
          <span class="search-icon">🔍</span>
        </div>
      </div>
    </div>

    <!-- Upload Area -->
    <div class="upload-area" id="upload-area">
      <div class="upload-content">
        <div class="upload-icon">📁</div>
        <h3>Drop files to upload</h3>
        <p>or <button class="upload-btn" id="select-files">select files</button></p>
        <small>Maximum size: 50MB. Supported: Images, Videos, Audio, Documents</small>
      </div>
      <input type="file" id="file-input" multiple accept="image/*,video/*,audio/*,.pdf,.doc,.docx,.txt" style="display: none;" />
    </div>

    <!-- Upload Progress -->
    <div class="upload-progress" id="upload-progress" style="display: none;">
      <div class="progress-item" id="progress-template" style="display: none;">
        <div class="progress-info">
          <span class="file-name"></span>
          <span class="file-size"></span>
        </div>
        <div class="progress-bar">
          <div class="progress-fill"></div>
        </div>
        <span class="progress-status"></span>
      </div>
    </div>

    <!-- Media Grid -->
    {error && (
      <div class="error-message">
        <strong>Error:</strong> {error}
      </div>
    )}

     <div class="media-container" id="media-container">
    <div class="media-grid" id="media-grid">
      {mediaItems.map((media) => (
        <div class="media-item" data-id={media.id}>
          <div class="media-thumbnail" data-media-id={media.id}>
            {isImage(media.media_path) ? (
              <img src={getMediaURL(media.media_path)} alt={media.alt} loading="lazy" />
            ) : (
              <div class="file-icon">{getFileIcon(media.media_path)}</div>
            )}
              <div class="media-overlay">
                <button class="overlay-btn edit-btn" data-id={media.id} title="Edit">✏️</button>
                <button class="overlay-btn delete-btn" data-id={media.id} title="Delete">🗑️</button>
                <button class="overlay-btn copy-btn" data-path={media.media_path} title="Copy URL">📋</button>
              </div>
            </div>
            <div class="media-info">
              <h4 class="media-name" title={media.name}>{media.name}</h4>
              <p class="media-description" title={media.description}>
                {media.description.length > 60 ? media.description.substring(0, 60) + '...' : media.description}
              </p>
              <div class="media-meta">
                <span class="upload-date">{new Date(media.created_at).toLocaleDateString()}</span>
                {media.post_count && media.post_count > 0 && (
                  <span class="usage-count">{media.post_count} {media.post_count === 1 ? 'post' : 'posts'}</span>
                )}
              </div>
            </div>
          </div>
        ))}
      </div>

      {mediaItems.length === 0 && !error && (
        <div class="empty-state">
          <div class="empty-icon">📂</div>
          <h3>No media files yet</h3>
          <p>Upload your first file by dropping it above or clicking "select files"</p>
        </div>
      )}
    </div>
  </div>

  <!-- Edit Modal -->
  <div class="modal" id="edit-modal" style="display: none;">
    <div class="modal-content">
      <div class="modal-header">
        <h3>Edit Media</h3>
        <button class="modal-close" id="close-modal">&times;</button>
      </div>
      <form class="modal-body" id="edit-form">
        <input type="hidden" id="edit-id" />
        
        <div class="form-group">
          <label for="edit-name">Name:</label>
          <input type="text" id="edit-name" name="name" required />
        </div>
        
        <div class="form-group">
          <label for="edit-description">Description:</label>
          <textarea id="edit-description" name="description" rows="3" required></textarea>
        </div>
        
        <div class="form-group">
          <label for="edit-alt">Alt Text:</label>
          <input type="text" id="edit-alt" name="alt" required />
        </div>

        <div class="form-actions">
          <button type="button" class="btn btn-secondary" id="cancel-edit">Cancel</button>
          <button type="submit" class="btn btn-primary">Save Changes</button>
        </div>
      </form>
    </div>
  </div>

  <!-- Toast Notifications -->
  <div class="toast-container" id="toast-container"></div>


  <script>
      import { api, getMediaURL } from '@/lib/api';
    import type { Media } from '@/lib/types';

    // Global variables
    let mediaItems: Media[] = [];
    let currentEditId: number | null = null;

    // DOM elements
    const uploadArea = document.getElementById('upload-area')!;
    const fileInput = document.getElementById('file-input')! as HTMLInputElement;
    const selectFilesBtn = document.getElementById('select-files')!;
    const uploadProgress = document.getElementById('upload-progress')!;
    const progressTemplate = document.getElementById('progress-template')!;
    const mediaGrid = document.getElementById('media-grid')!;
    const editModal = document.getElementById('edit-modal')!;
    const editForm = document.getElementById('edit-form')! as HTMLFormElement;
    const closeModal = document.getElementById('close-modal')!;
    const cancelEdit = document.getElementById('cancel-edit')!;
    const mediaSearch = document.getElementById('media-search')! as HTMLInputElement;
    const toastContainer = document.getElementById('toast-container')!;

    // Initialize
    init();

    function init() {
      setupEventListeners();
      loadMediaItems();
    }

    function setupEventListeners() {
      // Upload area events
      uploadArea.addEventListener('click', () => fileInput.click());
      selectFilesBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        fileInput.click();
      });

      // Drag and drop
      uploadArea.addEventListener('dragover', handleDragOver);
      uploadArea.addEventListener('dragleave', handleDragLeave);
      uploadArea.addEventListener('drop', handleDrop);

      // File input
      fileInput.addEventListener('change', handleFileSelect);

      // Modal events
      closeModal.addEventListener('click', closeEditModal);
      cancelEdit.addEventListener('click', closeEditModal);
      editForm.addEventListener('submit', handleEditSubmit);

      // Search
      mediaSearch.addEventListener('input', handleSearch);

      // Click outside modal to close
      editModal.addEventListener('click', (e) => {
        if (e.target === editModal) closeEditModal();
      });
    }

    async function loadMediaItems() {
      try {
        const response = await api.getMedia();
        mediaItems = response.data;
        renderMediaGrid();
        updateMediaCount();
      } catch (error) {
        showToast('Failed to load media items', 'error');
        console.error('Error loading media:', error);
      }
    }

    function renderMediaGrid() {
      mediaGrid.innerHTML = '';

      if (mediaItems.length === 0) {
        mediaGrid.innerHTML = `
          <div class="empty-state" style="grid-column: 1 / -1;">
            <div class="empty-icon">📂</div>
            <h3>No media files yet</h3>
            <p>Upload your first file by dropping it above or clicking "select files"</p>
          </div>
        `;
        return;
      }

      mediaItems.forEach(media => {
        const mediaItem = createMediaItemElement(media);
        mediaGrid.appendChild(mediaItem);
      });
    }

     function createMediaItemElement(media: Media): HTMLElement {
      const item = document.createElement('div');
      item.className = 'media-item';
      item.dataset.id = media.id.toString();

      const isImage = ['jpg', 'jpeg', 'png', 'gif', 'webp', 'bmp'].includes(
        media.media_path.split('.').pop()?.toLowerCase() || ''
      );

      const fileIcon = getFileIcon(media.media_path);
      const mediaURL = getMediaURL(media.media_path);

      item.innerHTML = `
        <div class="media-thumbnail" data-media-id="${media.id}">
          ${isImage 
            ? `<img src="${mediaURL}" alt="${media.alt}" loading="lazy" />`
            : `<div class="file-icon">${fileIcon}</div>`
          }
          <div class="media-overlay">
            <button class="overlay-btn edit-btn" data-id="${media.id}" title="Edit">✏️</button>
            <button class="overlay-btn delete-btn" data-id="${media.id}" title="Delete">🗑️</button>
            <button class="overlay-btn copy-btn" data-path="${media.media_path}" title="Copy URL">📋</button>
          </div>
        </div>
        <div class="media-info">
          <h4 class="media-name" title="${media.name}">${media.name}</h4>
          <p class="media-description" title="${media.description}">
            ${media.description.length > 60 ? media.description.substring(0, 60) + '...' : media.description}
          </p>
          <div class="media-meta">
            <span class="upload-date">${new Date(media.created_at).toLocaleDateString()}</span>
            ${media.post_count && media.post_count > 0 
              ? `<span class="usage-count">${media.post_count} ${media.post_count === 1 ? 'post' : 'posts'}</span>`
              : ''
            }
          </div>
        </div>
      `;

      // Add event listeners
      const editBtn = item.querySelector('.edit-btn')!;
      const deleteBtn = item.querySelector('.delete-btn')!;
      const copyBtn = item.querySelector('.copy-btn')!;

      editBtn.addEventListener('click', () => openEditModal(media));
      deleteBtn.addEventListener('click', () => deleteMedia(media.id));
      copyBtn.addEventListener('click', () => copyToClipboard(media.media_path));

      return item;
    }

    function getFileIcon(mediaPath: string): string {
      const ext = mediaPath.split('.').pop()?.toLowerCase();
      if (['jpg', 'jpeg', 'png', 'gif', 'webp', 'bmp', 'svg'].includes(ext || '')) return '🖼️';
      if (['mp4', 'mov', 'avi', 'mkv', 'webm'].includes(ext || '')) return '🎥';
      if (['mp3', 'wav', 'ogg', 'm4a'].includes(ext || '')) return '🎵';
      if (['pdf'].includes(ext || '')) return '📄';
      if (['doc', 'docx'].includes(ext || '')) return '📝';
      return '📁';
    }

    function updateMediaCount() {
      const countElement = document.querySelector('.media-count');
      if (countElement) {
        countElement.textContent = `${mediaItems.length} ${mediaItems.length === 1 ? 'item' : 'items'}`;
      }
    }

    // Drag and drop handlers
    function handleDragOver(e: DragEvent) {
      e.preventDefault();
      uploadArea.classList.add('drag-over');
    }

    function handleDragLeave(e: DragEvent) {
      e.preventDefault();
      if (!uploadArea.contains(e.relatedTarget as Node)) {
        uploadArea.classList.remove('drag-over');
      }
    }

    function handleDrop(e: DragEvent) {
      e.preventDefault();
      uploadArea.classList.remove('drag-over');
      
      const files = Array.from(e.dataTransfer?.files || []);
      if (files.length > 0) {
        uploadFiles(files);
      }
    }

    function handleFileSelect(e: Event) {
      const target = e.target as HTMLInputElement;
      const files = Array.from(target.files || []);
      if (files.length > 0) {
        uploadFiles(files);
      }
    }

    async function uploadFiles(files: File[]) {
      uploadProgress.style.display = 'block';

      for (const file of files) {
        await uploadSingleFile(file);
      }

      // Hide progress after a delay
      setTimeout(() => {
        uploadProgress.style.display = 'none';
        uploadProgress.innerHTML = '';
      }, 2000);

      // Reload media items
      await loadMediaItems();
    }

    async function uploadSingleFile(file: File) {
      const progressItem = progressTemplate.cloneNode(true) as HTMLElement;
      progressItem.style.display = 'flex';
      progressItem.id = '';

      const fileName = progressItem.querySelector('.file-name')!;
      const fileSize = progressItem.querySelector('.file-size')!;
      const progressFill = progressItem.querySelector('.progress-fill')! as HTMLElement;
      const progressStatus = progressItem.querySelector('.progress-status')!;

      fileName.textContent = file.name;
      fileSize.textContent = `${(file.size / 1024 / 1024).toFixed(2)} MB`;
      progressStatus.textContent = 'Uploading...';

      uploadProgress.appendChild(progressItem);

      try {
        // Simulate progress (since fetch doesn't provide upload progress easily)
        let progress = 0;
        const progressInterval = setInterval(() => {
          progress += Math.random() * 30;
          if (progress > 90) progress = 90;
          progressFill.style.width = `${progress}%`;
        }, 200);

        const formData = new FormData();
        formData.append('file', file);
        formData.append('name', file.name.split('.')[0]);
        formData.append('description', `Uploaded file: ${file.name}`);
        formData.append('alt', `${file.name} image`);

        const result = await api.createMedia(formData);

        clearInterval(progressInterval);
        progressFill.style.width = '100%';
        progressStatus.textContent = 'Complete';
        progressItem.style.background = '#f0fff4';

        showToast(`${file.name} uploaded successfully`, 'success');

      } catch (error) {
        progressStatus.textContent = 'Failed';
        progressItem.style.background = '#fff5f5';
        showToast(`Failed to upload ${file.name}: ${error.message}`, 'error');
        console.error('Upload error:', error);
      }
    }

    function openEditModal(media: Media) {
      currentEditId = media.id;
      
      (document.getElementById('edit-id') as HTMLInputElement).value = media.id.toString();
      (document.getElementById('edit-name') as HTMLInputElement).value = media.name;
      (document.getElementById('edit-description') as HTMLTextAreaElement).value = media.description;
      (document.getElementById('edit-alt') as HTMLInputElement).value = media.alt;
      
      editModal.style.display = 'flex';
    }

    function closeEditModal() {
      editModal.style.display = 'none';
      currentEditId = null;
      editForm.reset();
    }

    async function handleEditSubmit(e: Event) {
      e.preventDefault();
      
      if (!currentEditId) return;

      const formData = new FormData(editForm);
      const data = {
        name: formData.get('name') as string,
        description: formData.get('description') as string,
        alt: formData.get('alt') as string,
      };

      try {
        await api.updateMedia(currentEditId, data);
        showToast('Media updated successfully', 'success');
        closeEditModal();
        await loadMediaItems();
      } catch (error) {
        showToast(`Failed to update media: ${error.message}`, 'error');
        console.error('Update error:', error);
      }
    }

    async function deleteMedia(id: number) {
      if (!confirm('Are you sure you want to delete this media file?')) return;

      try {
        await api.deleteMedia(id);
        showToast('Media deleted successfully', 'success');
        await loadMediaItems();
      } catch (error) {
        showToast(`Failed to delete media: ${error.message}`, 'error');
        console.error('Delete error:', error);
      }
    }

     async function copyToClipboard(mediaPath: string) {
      try {
        const fullUrl = getMediaURL(mediaPath);
        // If it's a relative URL, make it absolute
        const absoluteUrl = fullUrl.startsWith('http') ? fullUrl : `${window.location.origin}${fullUrl}`;
        await navigator.clipboard.writeText(absoluteUrl);
        showToast('URL copied to clipboard', 'success');
      } catch (error) {
        showToast('Failed to copy URL', 'error');
      }
    }

    function handleSearch(e: Event) {
      const target = e.target as HTMLInputElement;
      const query = target.value.toLowerCase();

      const items = mediaGrid.querySelectorAll('.media-item');
      items.forEach(item => {
        const name = item.querySelector('.media-name')?.textContent?.toLowerCase() || '';
        const description = item.querySelector('.media-description')?.textContent?.toLowerCase() || '';
        
        if (name.includes(query) || description.includes(query)) {
          (item as HTMLElement).style.display = 'block';
        } else {
          (item as HTMLElement).style.display = 'none';
        }
      });
    }

    function showToast(message: string, type: 'success' | 'error' = 'success') {
      const toast = document.createElement('div');
      toast.className = `toast ${type}`;
      toast.innerHTML = `
        ${message}
        <button class="toast-close">&times;</button>
      `;

      const closeBtn = toast.querySelector('.toast-close')!;
      closeBtn.addEventListener('click', () => toast.remove());

      toastContainer.appendChild(toast);

      // Auto remove after 5 seconds
      setTimeout(() => {
        if (toast.parentNode) {
          toast.remove();
        }
      }, 5000);
    }
  </script>
</Admin>